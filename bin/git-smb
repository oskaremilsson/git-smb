#!/usr/bin/env python

import sys
import os
import subprocess
import tempfile
import json
import winsound


######################
# audio player methods
######################

def is_exe(fpath):
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)


def which(program):
    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def audioplayer():
    for p in ('afplay', 'aplay', 'mpg123'):
        found = which(p)
        if found is not None:
            return found
    return None


def play(sound):
    datapath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    datapath = os.path.join(datapath, 'share/data/' + get_sounds_set())
    if not sound.endswith('.wav'):
                sound += '.wav'

    winsound.PlaySound(os.path.join(datapath, sound), winsound.SND_FILENAME)


######################
# wrapper methods
######################

def what_sound(sounds, command):
    return sounds['commands'].get(command, None)


def what_sound_on_error(sounds, command):
    return {
        'config': None, # git config is often used to build prompts
        'rev-parse': None, # git rev-parse is often used to build prompts
        'describe': None, # git describe is often used to build prompts
    }.get(command, sounds['error'])


def call_git(sounds, argv):
    argument_length = len(argv)
    argv.insert(0, 'git')
    # argv.insert(0, '/usr/bin/env')

    try:
        with tempfile.NamedTemporaryFile() as temp:
            subprocess.check_call(argv)
            return True
    except subprocess.CalledProcessError as error:
        # Make an exception for calls without an argument. This displays the quick help, so there's not really an error.
        if argument_length is 0:
            return False

        sound = what_sound_on_error(sounds, argv[2])
        if sound is not None:
            play(sound)

    return False


def load_sounds():
    datapath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    datapath = os.path.join(datapath, 'share/data/' + get_sounds_set())
    with open(os.path.join(datapath, "sounds.json")) as sound_file:
        sounds = json.load(sound_file)

    return sounds


def get_sounds_set():
    try:
        config_file = get_config_file()

        with open(config_file) as config_file:
            config = json.load(config_file)

        return config['theme']
    except Exception as error:
        return 'smb'


def get_config_file():
    config_path1 = os.path.join('/etc/git-smb/', "config.json")
    config_path2 = os.path.join('/usr/local/etc/git-smb/', "config.json")
    config_path3 = os.path.join(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'etc/'), "config.json")

    if os.path.exists(config_path1):
        return config_path1

    if os.path.exists(config_path2):
        return config_path2

    if os.path.exists(config_path3):
        return config_path3

    raise Exception("Configuration file not found")


def main(argv):
    sounds = load_sounds()

    git_command = argv[0] if len(argv) > 0 else None
    return_value = call_git(sounds, argv)

    if return_value:
        sound = what_sound(sounds, git_command)
        if sound is not None:
            play(sound)


if __name__ == "__main__":
    main(sys.argv[1:])
